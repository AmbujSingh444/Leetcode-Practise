SQL practice Question:

1.Select command: 

 What is the SELECT Command in SQL?
The SELECT command is used in SQL to retrieve data from one or more tables in a database. It's the most commonly used command and forms the basis for querying data.

 Basic Syntax:
SELECT column1, column2, ...
FROM table_name;
    • SELECT: Specifies the columns you want to fetch.
    • FROM: Indicates the table from which to retrieve the data.

Examples of SELECT

1. Select All Columns
SELECT * FROM employees;
This selects all columns from the employees table.

2. Select Specific Columns
SELECT first_name, last_name FROM employees;
This selects only the first_name and last_name columns from the employees table.

3. Using WHERE Clause to Filter Data
SELECT * FROM employees
WHERE department = 'Sales';
 This returns only employees working in the Sales department.

4. Using ORDER BY to Sort Results
SELECT * FROM employees
ORDER BY salary DESC;
 This returns all employees sorted by salary in descending order.

5. Using Aliases (AS) for Better Readability
SELECT first_name AS "First Name", last_name AS "Last Name"
FROM employees;
 This will display column headers as “First Name” and “Last Name”.

6. Using DISTINCT to Remove Duplicates
SELECT DISTINCT department FROM employees;
This will return a list of unique departments.

7. Limiting the Number of Results
SELECT * FROM employees
LIMIT 5;
This returns only the first 5 records from the table.

 Summary:
Clause
Purpose
SELECT
Specifies which columns to return
FROM
Specifies the table to query
WHERE
Filters records based on conditions
ORDER BY
Sorts results
LIMIT
Limits number of rows returned
DISTINCT
Removes duplicate values
AS
Gives a temporary name (alias) to columns

*****************************************************************************


LeetCode Problems:

1. Recycleable and Low fat products

code :
# Write your MySQL query statement below
select product_id -- selecting product id column 
from Products -- Products is table name
where low_fats = 'Y' AND recyclable = 'Y'; -- using and since we need both.


Products =
| product_id | low_fats | recyclable | | ---------- | -------- | ---------- | | 0 | Y | N | | 1 | Y | Y | | 2 | N | Y | | 3 | Y | Y | | 4 | N | N |
Output
| product_id | | ---------- | | 1 | | 3 |
Expected
| product_id | | ---------- | | 1 | | 3 |




2. Find Customer Refree

code : 
# Write your MySQL query statement below
select name
from Customer
WHERE referee_id != 2 or referee_id is null ;/*since we need to select id who don't have any value ie null so we need to include that as well*/

Output:
Customer =
| id | name | referee_id | | -- | ---- | ---------- | | 1 | Will | null | | 2 | Jane | null | | 3 | Alex | 2 | | 4 | Bill | null | | 5 | Zack | 1 | | 6 | Mark | 2 |
Output
| name | | ---- | | Will | | Jane | | Bill | | Zack |
Expected
| name | | ---- | | Will | | Jane | | Bill | | Zack |


3. Big Countries

code:
# Write your MySQL query statement below
SELECT name,population,area
FROM world
WHERE area >= 3000000 or population >= 25000000;


Output:
World =
| name | continent | area | population | gdp | | ----------- | --------- | ------- | ---------- | ------------ | | Afghanistan | Asia | 652230 | 25500100 | 20343000000 | | Albania | Europe | 28748 | 2831741 | 12960000000 | | Algeria | Africa | 2381741 | 37100000 | 188681000000 | | Andorra | Europe | 468 | 78115 | 3712000000 | | Angola | Africa | 1246700 | 20609294 | 100990000000 |
Output
| name | population | area | | ----------- | ---------- | ------- | | Afghanistan | 25500100 | 652230 | | Algeria | 37100000 | 2381741 |
Expected
| name | population | area | | ----------- | ---------- | ------- | | Afghanistan | 25500100 | 652230 | | Algeria | 37100000 | 2381741 |


4. Article Views

code:
# Write your MySQL query statement below
SELECT author_id as id #since we need output as id so we rename it
FROM views
WHERE author_id = viewer_id #match the condition
group by author_id # since there are multiple values so we group by them to one
order by author_id; #we need output in ascending order 


Output:

Views =
| article_id | author_id | viewer_id | view_date | | ---------- | --------- | --------- | ---------- | | 1 | 3 | 5 | 2019-08-01 | | 1 | 3 | 6 | 2019-08-02 | | 2 | 7 | 7 | 2019-08-01 | | 2 | 7 | 6 | 2019-08-02 | | 4 | 7 | 1 | 2019-07-22 | | 3 | 4 | 4 | 2019-07-21 | 
View more
Output
| id | | -- | | 4 | | 7 |
Expected
| id | | -- | | 4 | | 7 |


5. Invalid Tweets

code:
# Write your MySQL query statement below
SELECT tweet_id
FROM tweets 
WHERE length(content)>15; # we use length to check tweet greater than 15.


Output:
Tweets =
| tweet_id | content | | -------- | --------------------------------- | | 1 | Let us Code | | 2 | More than fifteen chars are here! |
Output
| tweet_id | | -------- | | 2 |
Expected
| tweet_id | | -------- | | 2 |



####################################################################Join####################################################


2. Join Command Practise ;
Theory 
What is a JOIN?
A JOIN combines rows from two (or more) tables based on a related column between them. JOINs let you pull together related data that’s stored separately for normalization.

Sample Tables
Employees
emp_id
emp_name
dept_id
1
Alice
10
2
Bob
20
3
Charlie
NULL
4
Diana
10
Departments
dept_id
dept_name
10
HR
20
Engineering
30
Marketing

1. INNER JOIN
Returns rows only when there is a match in both tables.
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
INNER JOIN Departments d
  ON e.dept_id = d.dept_id;
Result:
emp_id
emp_name
dept_name
1
Alice
HR
2
Bob
Engineering
4
Diana
HR
Charlie is excluded because dept_id is NULL; Marketing isn’t shown because no employee is in dept 30.

2. LEFT (OUTER) JOIN
Returns all rows from the left table, and matched rows from the right. Unmatched right-side columns become NULL.
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
LEFT JOIN Departments d
  ON e.dept_id = d.dept_id;
Result:
emp_id
emp_name
dept_name
1
Alice
HR
2
Bob
Engineering
3
Charlie
NULL
4
Diana
HR
Charlie appears with NULL dept_name; dept 30 still isn’t shown.

3. RIGHT (OUTER) JOIN
Returns all rows from the right table, and matched rows from the left. Unmatched left-side columns become NULL.
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
RIGHT JOIN Departments d
  ON e.dept_id = d.dept_id;
Result:
emp_id
emp_name
dept_name
1
Alice
HR
4
Diana
HR
2
Bob
Engineering
NULL
NULL
Marketing
Department 30 appears with NULL employee info.

4. FULL OUTER JOIN
Returns all rows when there is a match in either table. (Not supported in MySQL—use UNION of LEFT and RIGHT.)
-- In PostgreSQL, SQL Server, etc.:
SELECT e.emp_id, e.emp_name, d.dept_name
FROM Employees e
FULL OUTER JOIN Departments d
  ON e.dept_id = d.dept_id;
Result:
emp_id
emp_name
dept_name
1
Alice
HR
4
Diana
HR
2
Bob
Engineering
3
Charlie
NULL
NULL
NULL
Marketing

5. CROSS JOIN
Returns the Cartesian product—every row in A paired with every row in B.
SELECT e.emp_name, d.dept_name
FROM Employees e
CROSS JOIN Departments d;
If Employees has 4 rows and Departments has 3, you get 4×3 = 12 rows. Use with care!

6. SELF JOIN
A table joined to itself, useful for hierarchical data.
Suppose we add a manager column to Employees:
emp_id
emp_name
manager_id
1
Alice
NULL
2
Bob
1
3
Charlie
1
4
Diana
2
To list each employee with their manager’s name:
SELECT e.emp_name     AS employee,
       m.emp_name     AS manager
FROM Employees e
LEFT JOIN Employees m
  ON e.manager_id = m.emp_id;
employee
manager
Alice
NULL
Bob
Alice
Charlie
Alice
Diana
Bob

 Quick Recap
JOIN Type
Returns
INNER
Only matching rows
LEFT
All left-table rows + matching right; NULLs if no match
RIGHT
All right-table rows + matching left; NULLs if no match
FULL OUTER
All rows from both tables; NULLs where no match
CROSS
Cartesian product
SELF
Table joined to itself for hierarchical or pairwise comparisons


##############################################################################

Leetcode Problems with solutions :

1. Replace Employee ID with the Unique Identifier.

Code :
# Write your MySQL query statement below
#Using Left join since we need all columns from left side table and only matching columns from right side table
SELECT e.name , empuni.unique_id
FROM Employees e
LEFT JOIN EmployeeUNI empuni
ON e.id = empuni.id

Output:
nput
Employees =
| id | name | | -- | -------- | | 1 | Alice | | 7 | Bob | | 11 | Meir | | 90 | Winston | | 3 | Jonathan |
EmployeeUNI =
| id | unique_id | | -- | --------- | | 3 | 1 | | 11 | 2 | | 90 | 3 |
Output
| name | unique_id | | -------- | --------- | | Alice | null | | Bob | null | | Meir | 2 | | Winston | 3 | | Jonathan | 1 |
Expected
| unique_id | name | | --------- | -------- | | null | Alice | | null | Bob | | 2 | Meir | | 3 | Winston | | 1 | Jonathan |


2. Product Sale Analysis

code : 
# Write your MySQL query statement below
#Here we apply Inner join since we need only matching columns from both the tables
SELECT product_name,year,price
FROM Sales
INNER JOIN Product 
ON Sales.product_id = Product.product_id

Output :

Input
Sales =
| sale_id | product_id | year | quantity | price | | ------- | ---------- | ---- | -------- | ----- | | 1 | 100 | 2008 | 10 | 5000 | | 2 | 100 | 2009 | 12 | 5000 | | 7 | 200 | 2011 | 15 | 9000 |
Product =
| product_id | product_name | | ---------- | ------------ | | 100 | Nokia | | 200 | Apple | | 300 | Samsung |
Output
| product_name | year | price | | ------------ | ---- | ----- | | Nokia | 2009 | 5000 | | Nokia | 2008 | 5000 | | Apple | 2011 | 9000 |
Expected
| product_name | year | price | | ------------ | ---- | ----- | | Nokia | 2009 | 5000 | | Nokia | 2008 | 5000 | | Apple | 2011 | 9000 |


3. Customer who visited but did not make any transactions

Code : 
# Write your MySQL query statement below
SELECT customer_id, count(Visits.visit_id) as count_no_trans #since visit_id is present in both tables we need to mention which table we using
FROM Visits
LEFT JOIN Transactions
ON Visits.visit_id = Transactions.visit_id
WHERE transaction_id is null
GROUP BY customer_id
# we using count to count the null transactions by particular visit_id
# group by group the count as per each customer_id


Output ;
Input
Visits =
| visit_id | customer_id | | -------- | ----------- | | 1 | 23 | | 2 | 9 | | 4 | 30 | | 5 | 54 | | 6 | 96 | | 7 | 54 | 
View more
Transactions =
| transaction_id | visit_id | amount | | -------------- | -------- | ------ | | 2 | 5 | 310 | | 3 | 5 | 300 | | 9 | 5 | 200 | | 12 | 1 | 910 | | 13 | 2 | 970 |
Output
| customer_id | count_no_trans | | ----------- | -------------- | | 30 | 1 | | 96 | 1 | | 54 | 2 |
Expected
| customer_id | count_no_trans | | ----------- | -------------- | | 30 | 1 | | 96 | 1 | | 54 | 2 |






4. Rising Temperature

Code :
# Write your MySQL query statement below
#here will be using self join since we need to find output within given table
SELECT A.id
FROM Weather A, Weather B #create two tables from one for comparing
WHERE DATEDIFF(A.recorddate ,B.recorddate) = 1 #since we need to compare next day with previous so we take datediff
AND A.temperature > B.temperature
# We only need to show id whose present day temp is more than previous day so we apply above condition.

Output :
Input
Weather =
| id | recordDate | temperature | | -- | ---------- | ----------- | | 1 | 2015-01-01 | 10 | | 2 | 2015-01-02 | 25 | | 3 | 2015-01-03 | 20 | | 4 | 2015-01-04 | 30 |
Output
| id | | -- | | 2 | | 4 |
Expected
| Id | | -- | | 2 | | 4 |


5. Average Time of Process per Machine

Code : 
# Write your MySQL query statement below
#Using Inner Join 
SELECT A.machine_id, ROUND(AVG(B.timestamp - A.timestamp),3) AS processing_time
FROM Activity A,Activity B
WHERE A.machine_id = B.machine_id AND A.process_id = B.process_id
AND A.timestamp < B.timestamp
GROUP BY A.machine_id
ORDER BY A.machine_id
#machine_id and process_id should be same for both process
#timestamp of end will be always greater than start
# using group by to combing together similar machine id

Output ;
Input
Activity =
| machine_id | process_id | activity_type | timestamp | | ---------- | ---------- | ------------- | --------- | | 0 | 0 | start | 0.712 | | 0 | 0 | end | 1.52 | | 0 | 1 | start | 3.14 | | 0 | 1 | end | 4.12 | | 1 | 0 | start | 0.55 | | 1 | 0 | end | 1.55 | 
View more
Output
| machine_id | processing_time | | ---------- | --------------- | | 0 | 0.894 | | 1 | 0.995 | | 2 | 1.456 |
Expected
| machine_id | processing_time | | ---------- | --------------- | | 0 | 0.894 | | 1 | 0.995 | | 2 | 1.456 |

